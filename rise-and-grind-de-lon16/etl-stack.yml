AWSTemplateFormatVersion: '2010-09-09'
Description: Stack for ETL resources - S3 Data Bucket, Lambda, Role

Parameters:
  TeamName:
    Type: String
    Description: Enter your name in format 'first-last' to customise the way your resources are named
    Default: rise-and-grind 
  DBName:
    Type: String
    Description: Enter the team name you want to use for DB connections
    Default: riseandgrindgrind_cafe_db
  NetworkStackName:
    Type: String
    Description: Network stack with VPC 
    Default: project-networking
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
    Description: Automatically look up the latest AMI for Amazon Linux v2

  EC2InstanceProfileRoleName:
    Type: String
    Default: de-academy-ec2-role-instance-profile #####
    Description: The shared EC2 instance profile name to use
  EC2InstanceIngressIp:
    Type: String
    Description: Custom IP address for Grafana HTTP ingress rule
    Default: 0.0.0.0
  EC2UserData:
    Type: String
    Default: ""
    Description: User data script to run on EC2 server boot

Resources:
  EtlLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${TeamName}-etl-lambda'
      Runtime: python3.12
      Handler: lambda_function.lambda_handler # file_name.function_name
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/lambda-execution-role' # security rule
      Timeout: 30 # max running time in seconds (make as low as possible)
      ReservedConcurrentExecutions: 10 # how many can run at once
      Code: ./src # use this folder for the zip of lambda code
      VpcConfig: # use the same networking as RedShift
        SecurityGroupIds: 
          - Fn::ImportValue: project-networking-VPCSGID
        SubnetIds:
          - Fn::ImportValue: project-networking-PrivateSubnet0ID
      Tags:
        - Key: Name
          Value: !Sub '${TeamName}-etl-lambda' 
      Environment:
        Variables:
          SSM_PARAMETER_NAME:
            Fn::Join:
            - '_'
            - Fn::Split:
              - '-'
              - !Sub 'riseandgrindgrind_redshift_settings'

  RawDataBucket:
    Type: AWS::S3::Bucket
    DependsOn:
      - RawDataBucketPermission
      - EtlLambdaFunction
    Properties:
      BucketName: !Sub '${TeamName}-raw-data'
      PublicAccessBlockConfiguration: # do not allow any public access
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      NotificationConfiguration: # trigger the lambda when a file is put in
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt EtlLambdaFunction.Arn
      Tags:
        - Key: Name
          Value: !Sub '${TeamName}raw-data'

  RawDataBucketPermission: # allow the triggered lambda to read from the bucket
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref EtlLambdaFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub 'arn:aws:s3:::${TeamName}-raw-data'

  RawDataBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref RawDataBucket
      PolicyDocument:
        Statement:
          - Sid: "AllowSSLRequestsOnly"
            Action: "s3:*"
            Principal: "*"
            Effect: "Deny" # Block if...
            Resource:
              - !Sub "arn:aws:s3:::${TeamName}-raw-data"
              - !Sub "arn:aws:s3:::${TeamName}-raw-data/*"
            Condition:
              Bool:
                aws:SecureTransport: "false" # ...the request is not HTTPS

  GrafanaEc2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro # A small & cheap type of EC2
      ImageId: !Ref LatestAmiId # Reference the special Parameter
      Tags:
        - Key: Name
          Value: !Sub '${TeamName}-ec2-grafana'
      NetworkInterfaces: # networking so we can see redshift
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          SubnetId:
            Fn::ImportValue: project-networking-PublicSubnet0ID
          GroupSet: # Security groups so we can see RedShift
            - Fn::ImportValue: project-networking-VPCSGID
            - Fn::GetAtt: GrafanaEC2InstanceSecurityGroup.GroupId
      LaunchTemplate: # other ec2 configurations
        LaunchTemplateId: !Ref GrafanaEC2LaunchTemplate
        # Make CF replace the ec2 if the launch template changes
        # ... this has pros and cons...
        Version: !GetAtt GrafanaEC2LaunchTemplate.LatestVersionNumber

  GrafanaEC2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${TeamName}-ec2-grafana-launch-template'
      VersionDescription: '01'
      LaunchTemplateData:
        UserData: !Ref EC2UserData
        IamInstanceProfile:
          Name: !Ref EC2InstanceProfileRoleName
        MetadataOptions:
          HttpEndpoint: enabled
          HttpProtocolIpv6: disabled
          HttpPutResponseHopLimit: 10
          HttpTokens: optional
          InstanceMetadataTags: enabled
        Monitoring:
          Enabled: True
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeType: gp3
              VolumeSize: 8
              Encrypted: true
              DeleteOnTermination: true

  GrafanaEC2InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Sets ingress and egress rules for HTTP, HTTPS and SSH
      Tags:
        - Key: Name
          Value: !Sub '${TeamName}-ec2-grafana'
      VpcId:
        Fn::ImportValue: project-networking-VPCID
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !Sub '${EC2InstanceIngressIp}/32' # Only our own laptops
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 86.16.172.45/32
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 104.28.86.104/32
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 86.169.236.4/32
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 109.146.106.51/32
      SecurityGroupEgress: # Allow HTTP and HTTPS back out to us (http) and AWS (https)
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !Sub '${EC2InstanceIngressIp}/32' # Only our own laptops
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
 



